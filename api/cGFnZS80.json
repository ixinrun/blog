{"per_page":10,"total":14,"current":4,"data":[{"title":"你知道ImageView的ScaleType怎么用吗","date":"2021-02-27T11:18:34.000Z","date_formatted":{"ll":"2021年2月27日","L":"2021/02/27","MM-DD":"02-27"},"excerpt":"<p>如果你像我一样很容易健忘，那么你也应该像我一样有一个好习惯——“好记性不如赖笔头”。Android开发中ImageView的ScaleType属性就有很多选择，说实话我是真的记不住这么多类型的用法，所以只有用笔记下来咯，用的时候直接翻看一下，2分钟搞定。你知道ImageView的ScaleType怎么用吗？</p>","link":"posts/1614424714","tags":["Android","ImageView"],"categories":["Android"]},{"title":"极度干货——GitHub受欢迎的Android UI Library整理","date":"2021-02-25T06:37:58.000Z","date_formatted":{"ll":"2021年2月25日","L":"2021/02/25","MM-DD":"02-25"},"excerpt":"<p>Android开发者福音，极度干货，以下是安卓UI相关开源项目库集合整理，开发必备，欢迎收藏，点赞。</p>","link":"posts/1614235078","tags":["Android"],"categories":["Android"]},{"title":"认识LRU经典算法","date":"2021-02-24T10:59:45.000Z","date_formatted":{"ll":"2021年2月24日","L":"2021/02/24","MM-DD":"02-24"},"excerpt":"<p>LRU算法是不是听着很耳熟，当然面试经常问到。本文带你了解LRU算法相关经典的实现方式以及为什么采用，至少在面试的时候不至于一问三不知而栽跟头，接下来就看看LRU到底是个啥东西吧。</p>","link":"posts/1614164385","tags":["LRU","双链表","算法"],"categories":["数据结构与算法"]},{"title":"Stream流式编程实现原理","date":"2021-02-17T17:09:06.000Z","date_formatted":{"ll":"2021年2月18日","L":"2021/02/18","MM-DD":"02-18"},"excerpt":"<p>上一篇《<a href=\"https://blog.ixin.run/posts/1613575203\" target=\"_blank\">Stream流式编程知识总结</a>》我们主要针对Stream流式编程的具体使用方法进行了深入的探讨，但是如果再来一个一问三连<code>what?-why?-then?</code>是不是又开始懵比了，哈哈，本文就运用一问三连的形式来进行争取不那么麻烦的解释Stream流式编程的实现原理。</p>","link":"posts/1613581746","tags":["Java","Stream","流式编程"],"categories":["Java"]},{"title":"Stream流式编程知识总结","date":"2021-02-17T15:19:29.000Z","date_formatted":{"ll":"2021年2月17日","L":"2021/02/17","MM-DD":"02-17"},"excerpt":"<p>本篇继上一篇《<a href=\"https://blog.ixin.run/posts/1613545058\" target=\"_blank\">Lambda表达式你会吗</a>》又一篇Java8新特性——流式编程，上篇文章中并没有采用Stream例子来装饰Lambda表达式，害怕有同学看不懂，所以在文章末尾留个彩蛋，本篇文章重点讲一下对Java8中流式编程的运用学习。</p>","link":"posts/1613575203","tags":["Java","Stream","流式编程"],"categories":["Java"]},{"title":"Lambda表达式你会吗","date":"2021-02-17T06:57:18.000Z","date_formatted":{"ll":"2021年2月17日","L":"2021/02/17","MM-DD":"02-17"},"excerpt":"<p>Lambda表达式是Java8的一个新特性，使得Java也能进行简单的函数式编程。臃肿的代码轻量化，实现逻辑突出化，可以取代大部分的匿名内部类，写出更优雅的Java代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。</p>\n<p>举个简单栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常规匿名写法</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;runnable实现常规写法!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Lambda表达式写法</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">&quot;runnable实现lambda写法!&quot;</span>)).start();</span><br></pre></td></tr></table></figure>\n<p>怎么样？简单吧，一行搞定！下边我就带着大家一起揭开Lambda表达式神秘的面纱。</p>","link":"posts/1613545058","tags":["Java","Lambda"],"categories":["Java"]},{"title":"玩转响应式编程RxJava","date":"2021-02-17T02:37:38.000Z","date_formatted":{"ll":"2021年2月17日","L":"2021/02/17","MM-DD":"02-17"},"excerpt":"<p>不知不觉RxJava3已经来了，想必RxJava2变化也不算太大。RxJava大家都不陌生，最初从RxJava1想必大家都是从网络三剑客（RxJava、Retrofit、OkHttp）中熟悉起来的吧。RxJava是响应式编程(Reactive Extensions，即Rx)的java实现，基于<strong>观察者模式</strong>实现了异步编程接口。Rx家族中RxJava、RxJs和Rx.NET都是比较流行的。本文带着大家一起了解一下RxJava的相关概念和使用方式。</p>","link":"posts/1613529505","tags":["网络三件套"],"categories":["Android"]},{"title":"属于我们的0214","date":"2021-02-14T06:56:32.000Z","date_formatted":{"ll":"2021年2月14日","L":"2021/02/14","MM-DD":"02-14"},"thumbnail":"https://i.pinimg.com/originals/8f/b9/fb/8fb9fbf71e8b86930ffd81f6982479c0.gif","excerpt":"","link":"posts/1613285792","tags":["爱情","生活"],"categories":["生活"]},{"title":"App启动的那些事（二）Activity的启动过程分析","date":"2021-02-11T02:52:54.000Z","date_formatted":{"ll":"2021年2月11日","L":"2021/02/11","MM-DD":"02-11"},"excerpt":"<p>我们平时启动一个Activity很简单，简单到只需要一行代码<code>startActivity(new Intent(mContext, LoginActivity.class));</code>，但是就是这行代码背后的过程却是环环相扣。网上大部分都是大块代码，看的头懵懵的，今天针对这一过程尽量用少量的代码分析一下。</p>","link":"posts/1613011974","tags":["开机启动"],"categories":["Android"]},{"title":"Java多态小记","date":"2021-02-07T16:14:49.000Z","date_formatted":{"ll":"2021年2月8日","L":"2021/02/08","MM-DD":"02-08"},"excerpt":"<p>Java三大特性：封装、继承和多态，随口就能说出，至于封装和继承太简单了，多态似乎有点迷糊，可以说多态就是封装和继承的组合体，今天回顾一下多态的知识。</p>","link":"posts/1612714489","tags":["Java","多态"],"categories":["Java"]}]}