{"title":"轻松玩转Flutter混合开发","date":"2021-09-09T08:20:27.000Z","date_formatted":{"ll":"2021年9月9日","L":"2021/09/09","MM-DD":"09-09"},"link":"posts/1631175663","comments":true,"categories":["Flutter"],"updated":"2022-02-05T09:14:01.713Z","content":"<p>Flutter自推出以来备受欢迎，国内最先引入使用的是闲鱼团队的闲鱼App。好多同学都知道Flutter是一套跨平台UI框架，最常见的运用则是一套代码同时可以编译出Android、iOS、H5等多种形式，但是实际开发中一般只有新项目我们才会用flutter进行直接编译打包，针对老项目谁都也不愿意完全推翻再用flutter重新写一遍，更多的是采用混合开发模式，即将flutter的产物嵌入到Android或者iOS项目中一同编译。本文我就总结一下Flutter混合开发的那些事。</p>\n<a id=\"more\"></a>\n<h2 id=\"方案选择\">方案选择<a title=\"#方案选择\" href=\"#方案选择\"></a></h2>\n<p>目前flutter混合开发非常类似组件化，有两种主流形式：</p>\n<ol>\n<li>源码集成</li>\n<li>产物集成</li>\n</ol>\n<p><strong>源码集成</strong>：主Native工程（Android、iOS）创建一个子flutter模块进行依赖。这种方式优点就是flutter代码更改可以及时同步到主工程；缺点就是flutter代码容易被改动，提交也容易冲突。</p>\n<p><strong>产物集成</strong>：单独建立flutter项目，然后构建产物，例如android可以构建出aar包，然后由原生进行远程依赖或者本地引入。这种方式的优点是flutter工程独立，可以有多环境开发者共同开发，主项目干净清爽解耦合；缺点就是每次都要先构建产物，主项目再更新依赖，比较麻烦。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/WEB37a9ff44aadc0867b107ea1f57561dad?method=download&amp;shareKey=e3f759425bb1abe0836d6576fc02022c\" alt=\"flutter混合开发方案图\" loading=\"lazy\" class=\"φbp\"></p>\n<p>针对android平台，接入之前需要注意从 Flutter v1.12 开始每个应用一次集成Flutter有以下限制：</p>\n<ol>\n<li>不支持多个Flutter库打包到一个应用程序中</li>\n<li>主项目支持java8</li>\n<li>从 v1.17 开始，Flutter 模块仅支持 Android 上的 AndroidX 应用程序。</li>\n</ol>\n<p>下边我就针对android平台接入flutter混合开发分别对这两种方案接入过程细说一下。</p>\n<h2 id=\"源码集成\">源码集成<a title=\"#源码集成\" href=\"#源码集成\"></a></h2>\n<p>源码集成注意以下几个步骤即可：</p>\n<p><strong>第一步：新建Flutter Module</strong></p>\n<p>新建Flutter Module有两种方式：第一种通过命令行方式，第二种是主工程项目可视化创建。</p>\n<p>针对VSCode三方开发工具可采用命令行方式创建，建议切到原生项目的父目录进行创建，这样flutter模块不与原生耦合，flutter模块将来可单独构建产物也可被ios项目依赖，这样更灵活一些（下同）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create -t <span class=\"keyword\">module</span> flutter_module</span><br></pre></td></tr></table></figure>\n<p>针对AndroidStodio开发工具可直接采用主工程项目可视化创建，依次点击左上角的File --&gt; New --&gt; New Flutter Project，然后选择Flutter Module，并依次填写下一步信息：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/WEB8ecd7cf99f6a820a03cd8848291e4fdb?method=download&amp;shareKey=c1f71cd686aed69121eb4486f8a89d05\" alt=\"主工程项目可视化创建Flutter模块\" loading=\"lazy\"></p>\n<p><strong>第二步：主项目依赖Flutter Module</strong></p>\n<p>首先在主项目根目录setting.gradle文件中配置，这一步主要目的工程项目中引入flutter模块：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setBinding(<span class=\"keyword\">new</span> Binding([<span class=\"attr\">gradle:</span> <span class=\"built_in\">this</span>]))</span><br><span class=\"line\">evaluate(<span class=\"keyword\">new</span> File(</span><br><span class=\"line\">        settingsDir,</span><br><span class=\"line\">        <span class=\"string\">&#x27;../flutter_module/.android/include_flutter.groovy&#x27;</span></span><br><span class=\"line\">))</span><br></pre></td></tr></table></figure>\n<p>当然，如果想在主工程开发过程中直接修改flutter_module而不用另外打开窗口可以加入如下代码，指定到flutter_module：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include <span class=\"string\">&#x27;:flutter_module&#x27;</span></span><br><span class=\"line\">project(<span class=\"string\">&#x27;:flutter_module&#x27;</span>).projectDir = <span class=\"keyword\">new</span> File(<span class=\"string\">&#x27;../flutter_module&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/WEBb8b96de473691f98c567062ddf4e0e5e?method=download&amp;shareKey=0211b4b678b466c2dae98544a8aecf12\" alt=\"主工程开发过程中直接修改flutter_module\" loading=\"lazy\" class=\"φbp\"></p>\n<p>最后在主工程的app模块的build.gradle文件中添加该flutter的依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation project(&#39;:flutter&#39;)</span><br></pre></td></tr></table></figure>\n<p>这里的依赖是唯一的，google只允许一个项目中添加一个flutter模块，因此这条依赖也就不需要指明具体是哪个flutter模块了，添加依赖后主项目就能准确的找到flutter模块主入口。</p>\n<p>到此源码集成就ok了，剩下的就是主项目与flutter项目的相互通信。通信过程会在下文讲到。</p>\n<h2 id=\"产物集成\">产物集成<a title=\"#产物集成\" href=\"#产物集成\"></a></h2>\n<p>大家都知道在新建flutter项目的时候有四种形式，其中只有Flutter Module形式可以打包成aar。</p>\n<p>单独新建一个Flutter Module，然后命令行执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter bulid aar</span><br></pre></td></tr></table></figure>\n<p>然后在<code>build-&gt;host-&gt;outputs-&gt;repo-&gt;</code>可以找到相应的产物：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/WEBa7c42fd077206477c4f7ac954969b2b4?method=download&amp;shareKey=aa522a00654db9a7024943e2d109f034\" alt=\"构建aar等产物\" loading=\"lazy\"></p>\n<p><strong>怎么引入呢？</strong></p>\n<p>这时候有同学可能会说，直接把aar包像android一样拷贝到lib文件下不就可以了。但是这样是不行的，我们解压aar：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/WEBd0a5851c7205fc12735c02b5437c4eac?method=download&amp;shareKey=33c0a2e8e067821ba41880f9319319da\" alt=\"flutter打包aar内部结构\" loading=\"lazy\"></p>\n<p>正常我们flutter构建apk解压后的文件结构：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/WEBd8d9503dfbf1452839b1e84654499cc9?method=download&amp;shareKey=fee9660ce694b64485c3b32b221ccd83\" alt=\"flutter打包apk内部结构\" loading=\"lazy\"></p>\n<p>我们大家也知道flutter架构主要分三部分：</p>\n<ol>\n<li>framework 主要有Dart开发业务逻辑和各种UI组件。</li>\n<li>engine 主要使用 C++ 编写，提供了 Flutter 核心 API 的底层实现。</li>\n<li>embedder 充当着宿主操作系统和 Flutter 之间的粘合剂的角色，类似java和c通信的jni层。</li>\n</ol>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/WEB931acad4bc3a8ba571b1f54e5f4ea21b?method=download&amp;shareKey=469d440937600c90721571a23a4d15ae\" alt=\"Flutter架构概览\" loading=\"lazy\" class=\"φbp\"></p>\n<p>我们会发现原来我们aar包中armeabi-v7a、<a href=\"http://xn--x86-64libflutter-v79y19bmy0dgf1b6pkfuax693c90ta.so\">x86-64等平台库中缺少了libflutter.so</a>，该库文件里包含有flutter引擎相关的库包和flutter引擎embedding，因此在原生项目中也就不能直接引用FlutterActivity等桥梁进一步使用，眼尖的同学会问aar包中不是也少libapp.so这个库文件吗？其实没有少，只不过打包aar的时候归总到jni文件夹下了，不信你去看看，libapp.so就是我们所有dart文件的浓缩。</p>\n<p>这里有两种方式可以进行引入：</p>\n<p><strong>第一种</strong>，直接依赖构建aar所在maven仓库，这里根据官方指示，我们可以依赖本地的maven仓库：<br>\n构建aar成功的时候我们会看到控制台已经给出了示例：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/WEBebc37854ba2abd430321d6dfabe9de9d?method=download&amp;shareKey=3f7fc57634b68c84f44cb43af4b3daad\" alt=\"flutter构建aar成功控制台接入示例\" loading=\"lazy\"></p>\n<p>两步过程即可：</p>\n<ol>\n<li>原生项目根目录的build.gradle中maven配置 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String storageUrl = System.env.FLUTTER_STORAGE_BASE_URL ?: <span class=\"string\">&quot;https://storage.googleapis.com&quot;</span></span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url <span class=\"string\">&#x27;F:\\Workspaces\\project_android\\project_flutter\\android_add_flutter\\flutter_module\\build\\host\\outputs\\repo&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url <span class=\"string\">&quot;$storageUrl/download.flutter.io&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>在原生项目app模块中进行依赖：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    debugImplementation <span class=\"string\">&#x27;com.demo.flutter_module:flutter_debug:1.0&#x27;</span></span><br><span class=\"line\">    profileImplementation <span class=\"string\">&#x27;com.demo.flutter_module:flutter_profile:1.0&#x27;</span></span><br><span class=\"line\">    releaseImplementation <span class=\"string\">&#x27;com.demo.flutter_module:flutter_release:1.0&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>接入原理是，通过maven把所有的依赖包下载下来，进而可以被原生使用，我们可以打开构建aar时产出的maven配置(例如：flutter_debug-1.0.pom)：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/WEBedd335e552b53e45360ce7ceb0f9760e?method=download&amp;shareKey=bf9386b586abe9716aa4eb11697910be\" alt=\"flutter构建aar产出的maven配置\" loading=\"lazy\"></p>\n<p>以上的依赖方式是本地依赖方式，也可以构建产物整体上传到远程Maven进行依赖，这也是常规做法。</p>\n<p><strong>第二种</strong>，可以通过fat-aar将所有的依赖以及三方的依赖一起打包构建出aar，引入到lib即可使用。</p>\n<p>这里推荐一篇采用fat-aar集成flutter module教程：<a href=\"https://juejin.cn/post/6850037282884452360\">https://juejin.cn/post/6850037282884452360</a></p>\n<p>fat-aar的官方文档：<a href=\"https://github.com/adwiv/android-fat-aar\">https://github.com/adwiv/android-fat-aar</a></p>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/Q1z6Mal2pZbequxk5I5UYA?\" target=\"_blank\">闲鱼技术-Flutter混合工程改造实践</a></li>\n<li><a href=\"https://flutter.dev/docs/development/add-to-app\">https://flutter.dev/docs/development/add-to-app</a></li>\n<li><a href=\"https://juejin.cn/post/6850037282884452360\">https://juejin.cn/post/6850037282884452360</a></li>\n</ul>\n","prev":{"title":"DO AS ONE WISHES","link":"posts/0"},"next":{"title":"网络三件套（一）为什么用OkHttp","link":"posts/1629967595"},"plink":"https://blog.ixin.run/posts/1631175663/","toc":[{"id":"方案选择","title":"方案选择","index":"1"},{"id":"源码集成","title":"源码集成","index":"2"},{"id":"产物集成","title":"产物集成","index":"3"},{"id":"参考","title":"参考","index":"4"}],"reward":true,"copyright":{"author":"乂星人","link":"<a href=\"https://blog.ixin.run/posts/1631175663/\" title=\"轻松玩转Flutter混合开发\">https://blog.ixin.run/posts/1631175663/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}