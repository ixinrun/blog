{"title":"玩转响应式编程RxJava","date":"2021-02-17T02:37:38.000Z","date_formatted":{"ll":"2021年2月17日","L":"2021/02/17","MM-DD":"02-17"},"link":"posts/1613529505","comments":true,"tags":["网络三件套"],"categories":["Android"],"updated":"2022-02-05T09:14:01.709Z","content":"<p>不知不觉RxJava3已经来了，想必RxJava2变化也不算太大。RxJava大家都不陌生，最初从RxJava1想必大家都是从网络三剑客（RxJava、Retrofit、OkHttp）中熟悉起来的吧。RxJava是响应式编程(Reactive Extensions，即Rx)的java实现，基于<strong>观察者模式</strong>实现了异步编程接口。Rx家族中RxJava、RxJs和Rx.NET都是比较流行的。本文带着大家一起了解一下RxJava的相关概念和使用方式。</p>\n<a id=\"more\"></a>\n<h2 id=\"基本信息\">基本信息<a title=\"#基本信息\" href=\"#基本信息\"></a></h2>\n<p>GitHub官网：<a href=\"https://github.com/ReactiveX/RxJava\">https://github.com/ReactiveX/RxJava</a></p>\n<p>核心：观察者模式</p>\n<p>过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x3D;&#x3D;&#x3D;3&#x3D;&#x3D;&#x3D;&#x3D;2&#x3D;&#x3D;&#x3D;&#x3D;1&#x3D;&#x3D;&#x3D;   [被观察者，上游，发送事件]</span><br><span class=\"line\">.subscribe()        [订阅，观察监听]</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;3&#x3D;&#x3D;&#x3D;&#x3D;2&#x3D;&#x3D;&#x3D;&#x3D;1&#x3D;&#x3D;&#x3D;   [观察者，下游，接收事件]</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些概念\">一些概念<a title=\"#一些概念\" href=\"#一些概念\"></a></h3>\n<ul>\n<li>被观察者（上游）</li>\n<li>观察者 （下游）</li>\n<li>操作符 （对象创建、数据转换）</li>\n<li>线程调度器 （线程切换）</li>\n<li>订阅 （上下游关系）</li>\n<li>事件调度器 （订阅关系管理）</li>\n<li>背压策略 （内存优化）</li>\n<li>Observables的&quot;热&quot;和&quot;冷&quot;</li>\n</ul>\n<h3 id=\"添加依赖\">添加依赖<a title=\"#添加依赖\" href=\"#添加依赖\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RxJava的依赖包</span></span><br><span class=\"line\">implementation <span class=\"string\">&#x27;io.reactivex.rxjava3:rxandroid:3.0.0&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//RxAndroid的依赖包  </span></span><br><span class=\"line\">implementation <span class=\"string\">&#x27;io.reactivex.rxjava3:rxjava:3.0.0&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>这里的RxAndroid是RxJava针对Android平台的扩展，主要用于Android上主线程调度切换（线程调度器）。</p>\n<h2 id=\"被观察者和观察者\">被观察者和观察者<a title=\"#被观察者和观察者\" href=\"#被观察者和观察者\"></a></h2>\n<p>RxJava2中有五对儿常用的观察者模式：</p>\n<ul>\n<li>Observable/Observer</li>\n<li>Flowable/Subscriber</li>\n<li>Single/SingleObserver</li>\n<li>Completable/CompletableObserver</li>\n<li>Maybe/MaybeObserver</li>\n</ul>\n<h3 id=\"observable/observer\">Observable/Observer<a title=\"#observable/observer\" href=\"#observable/observer\"></a></h3>\n<p><code>Observable/Observer</code>是日常开发中最常用的一对观察者模式，接口实现丰富。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 被观察者，上游，发射源</span></span><br><span class=\"line\">Observable mObservable=Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; e)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        e.onNext(<span class=\"number\">1</span>);</span><br><span class=\"line\">        e.onNext(<span class=\"number\">2</span>);</span><br><span class=\"line\">        e.onComplete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 观察者，下游，接收源</span></span><br><span class=\"line\">Observer mObserver=<span class=\"keyword\">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// todo 一旦订阅，首先会调用这个方法，而Disposable可用于取消订阅</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// todo 接收上游数据</span></span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;lucas&quot;</span>, <span class=\"string\">&quot;onNext: &quot;</span>+value );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// todo 发生错误</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// todo 结束</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订阅绑定</span></span><br><span class=\"line\">mObservable.subscribe(mObserver);</span><br></pre></td></tr></table></figure>\n<p>值得注意的是：<strong>这里的onCompleted（）、onError()仅会执行一次。前者需要在被观察者中主动调用观察者里才会接收，即使被观察者在onCompleted（）之后仍有事件这里的onNext()仍将终止，后者表示事件执行过程中发生了错误。</strong></p>\n<p>其实RxJava在使用过程中最大的一个优点就是<strong>链式调用</strong>，简洁，完整。以上写法可以改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; e)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        e.onNext(<span class=\"number\">1</span>);</span><br><span class=\"line\">        e.onNext(<span class=\"number\">2</span>);</span><br><span class=\"line\">        e.onComplete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).subscribe(<span class=\"keyword\">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// todo 一旦订阅，首先会调用这个方法，而Disposable可用于取消订阅</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// todo 接收上游数据</span></span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"string\">&quot;onNext: &quot;</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// todo 发生错误</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// todo 结束</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>另外<code>.subscribe()</code>的重载方式也很多，可以选择实现针对性的回调，例如只需要接收<code>onNext</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; e)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        e.onNext(<span class=\"number\">1</span>);</span><br><span class=\"line\">        e.onNext(<span class=\"number\">2</span>);</span><br><span class=\"line\">        e.onComplete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).subscribe(<span class=\"keyword\">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"flowable/subscriber\">Flowable/Subscriber<a title=\"#flowable/subscriber\" href=\"#flowable/subscriber\"></a></h3>\n<p><code>Flowable/Subscriber</code>和<code>Observable/Observer</code>接口实现基本一致，是五对儿观察者模式中唯一支持<strong>背压策略</strong>的一对儿，<strong>背压策略</strong>下文单独讲一下。</p>\n<h3 id=\"single/singleobserver\">Single/SingleObserver<a title=\"#single/singleobserver\" href=\"#single/singleobserver\"></a></h3>\n<p>Single只能发射一次数据，观察者回调也只有onSuccess或者onError。应对场景是当你使用一个单一连续事件流时可以采用Single。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Single.create(<span class=\"keyword\">new</span> SingleOnSubscribe&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(SingleEmitter&lt;String&gt; e)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        e.onSuccess(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 错误写法，重复调用也不会处理，因为只会调用一次</span></span><br><span class=\"line\">        e.onSuccess(<span class=\"string\">&quot;test2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).subscribe(<span class=\"keyword\">new</span> SingleObserver&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"completable/completableobserver\">Completable/CompletableObserver<a title=\"#completable/completableobserver\" href=\"#completable/completableobserver\"></a></h3>\n<p>Completable应对场景是只关心什么时候结束，回调实现也只有onComplete或者onError。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Completable.create(<span class=\"keyword\">new</span> CompletableOnSubscribe() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(CompletableEmitter e)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 单一onComplete或者onError</span></span><br><span class=\"line\">        e.onComplete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).subscribe(<span class=\"keyword\">new</span> CompletableObserver() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"maybe/maybeobserver\">Maybe/MaybeObserver<a title=\"#maybe/maybeobserver\" href=\"#maybe/maybeobserver\"></a></h3>\n<p>Maybe一般用的不多，它类似于Single和Completable的混合体，应对场景是要么发送一次数据要么结束，因此只能是以下其中一种情况：</p>\n<ul>\n<li>onSuccess或者onError</li>\n<li>onComplete或者onError</li>\n</ul>\n<p>onSuccess和onComplete是互斥的存在:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Maybe.create(<span class=\"keyword\">new</span> MaybeOnSubscribe&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(MaybeEmitter&lt;String&gt; e)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发送一个数据的情况，或者onError，不需要再调用onComplete(调用了也不会触发onComplete回调方法)</span></span><br><span class=\"line\">        e.onSuccess(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 不需要发送数据的情况，或者onError</span></span><br><span class=\"line\">        <span class=\"comment\">//e.onComplete();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).subscribe(<span class=\"keyword\">new</span> MaybeObserver&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// todo 发送一个数据时，相当于onNext和onComplete，但不会触发另一个方法onComplete</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// todo 无数据发送时候的onComplete事件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"操作符\">操作符<a title=\"#操作符\" href=\"#操作符\"></a></h2>\n<p>以下是一些常用的操作符归类：</p>\n<h3 id=\"创建型操作符\">创建型操作符<a title=\"#创建型操作符\" href=\"#创建型操作符\"></a></h3>\n<ul>\n<li>creat</li>\n<li>just</li>\n<li>from</li>\n<li>timer</li>\n<li>interval</li>\n<li>range</li>\n<li>empty</li>\n<li>error</li>\n<li>never</li>\n<li>defer</li>\n</ul>\n<h3 id=\"转换类操作符\">转换类操作符<a title=\"#转换类操作符\" href=\"#转换类操作符\"></a></h3>\n<ul>\n<li>cast</li>\n<li>map</li>\n<li>flatMap</li>\n<li>flatMapIterable</li>\n<li>concatMap</li>\n<li>switchMap</li>\n<li>scan</li>\n<li>groupBy</li>\n</ul>\n<h3 id=\"过滤类操作符\">过滤类操作符<a title=\"#过滤类操作符\" href=\"#过滤类操作符\"></a></h3>\n<ul>\n<li>filter</li>\n<li>ofType</li>\n<li>take</li>\n<li>takeLast</li>\n<li>first</li>\n<li>last</li>\n<li>skip</li>\n<li>skipLast</li>\n<li>distinct</li>\n<li>distinctUntilChanged</li>\n<li>ignoreElements</li>\n</ul>\n<h3 id=\"组合类操作符\">组合类操作符<a title=\"#组合类操作符\" href=\"#组合类操作符\"></a></h3>\n<ul>\n<li>concat</li>\n<li>merge</li>\n<li>zip</li>\n<li>combineLatest</li>\n</ul>\n<p>更多操作符动画演示：</p>\n<h2 id=\"线程调度器\">线程调度器<a title=\"#线程调度器\" href=\"#线程调度器\"></a></h2>\n<p>线程调度器主要用于指定上游线程和下游线程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.just(<span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot;Word&quot;</span>)</span><br><span class=\"line\">        .subscribeOn(Schedulers.newThread())</span><br><span class=\"line\">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">        .subscribe(<span class=\"keyword\">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li>subscribeOn() 指定上游事件激活时所在的线程</li>\n<li>observeOn() 指定下游事件接收数据时所在的线程</li>\n</ul>\n<p>RxJava为我们提供了以下几种调度器：</p>\n<ul>\n<li>Schedulers.trampoline() 默认当前线程，以FIFO标准执行，如当前线程中有任务在执行则将其暂停，等任务执行完毕后在接着处理。</li>\n<li>Schedulers.newThread() 总是启用新线程，并在新线程执行操作。</li>\n<li><a href=\"http://Schedulers.io\">Schedulers.io</a>() 用于IO密集型任务，例如读写文件、读写数据库、网络信息交互等。此调度器内部默认有一个线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</li>\n<li>Schedulers.computation() 用于计算任务，如事件循环和回调处理，默认线程数等于处理器数量。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</li>\n</ul>\n<p>另外，上边代码中的AndroidSchedulers.mainThread()是RxAndroid中特有的调度器，表示下游事件发生在android的主线程中，因为android子线程是不能更新UI的。</p>\n<p><strong>事件执行过程中允许多次切换线程（observeOn()可以出现多次，控制的是其后的操作）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.just(<span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot;Wrold&quot;</span>)</span><br><span class=\"line\">        .subscribeOn(Schedulers.newThread())  <span class=\"comment\">// 在新的线程中发起</span></span><br><span class=\"line\">        .observeOn(Schedulers.io())           <span class=\"comment\">// 在io线程中进行数据转换</span></span><br><span class=\"line\">        .map(<span class=\"keyword\">new</span> Function&lt;String, String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// io线程中处理数据</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> handleString(s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .observeOn(AndroidSchedulers.mainThread())  <span class=\"comment\">// 在主线程中接收数据</span></span><br><span class=\"line\">        .subscribe(<span class=\"keyword\">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 主线程中展示</span></span><br><span class=\"line\">                show(s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"订阅管理\">订阅管理<a title=\"#订阅管理\" href=\"#订阅管理\"></a></h2>\n<p>每一次订阅都会生成一个Disposable，用于这次订阅的管理，例如取消订阅，目的是在合适的时机进行释放。有时候一个页面中有多对儿订阅关系，如果单独一个一个释放，势必比较凌乱因此RxJava提供了一个容器CompositeDisposable，用于管理所有订阅关系，统一管理或者释放。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建事件管理器</span></span><br><span class=\"line\">CompositeDisposable cd = <span class=\"keyword\">new</span> CompositeDisposable();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订阅关系</span></span><br><span class=\"line\">Disposable disposable =  Observable.just(<span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot;Word&quot;</span>)</span><br><span class=\"line\">        .subscribeOn(Schedulers.trampoline())</span><br><span class=\"line\">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">        .subscribe(<span class=\"keyword\">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加某个订阅关系</span></span><br><span class=\"line\">cd.add(disposable);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清除所有订阅</span></span><br><span class=\"line\">cd.clear();</span><br></pre></td></tr></table></figure>\n<h2 id=\"背压策略\">背压策略<a title=\"#背压策略\" href=\"#背压策略\"></a></h2>\n<p>RxJava背压（Backpressure），当上游的事件触发的太快而使下游没有能力及时处理发送过来的数据消息造成消息的阻塞现象。这些数据既不会丢失，也不会被垃圾回收机制回收，而是存放在一个异步缓存池中，如果缓存池中的数据一直得不到处理，越积越多，最后就会造成内存溢出，这便是响应式编程中的背压（backpressure）问题。</p>\n<p>背压策略是指在异步场景中，被观察者发送事件速度远快于观察者的处理速度的情况下，一种告诉上游的被观察者降低发送速度的策略。</p>\n<p>在RxJava1中背压策略不是太清晰，因此RxJava2中专门进行了区分，明确指出只有<code>Flowable/Subscriber</code>支持背压策略。那么什么时候采用背压策略什么时候可以不采用呢？或者换句话说什么时候采用<code>Observable/Observer</code>和什么时候采用<code>Flowable/Subscriber</code>呢？这里给出一些判断方式：</p>\n<p>采用<code>Observable/Observer</code>：</p>\n<ul>\n<li>当上游在一段时间发送的数据量不大（以1000为界限）的时候优先选择使用Observable；</li>\n<li>在处理GUI相关的事件，比如鼠标移动或触摸事件，这种情况下很少会出现backpressured的问题，用Observable就足以满足需求；</li>\n<li>获取数据操作是同步的，但你的平台不支持Java流或者相关特性。使用Observable的开销低于Flowable。</li>\n</ul>\n<p>采用<code>Flowable/Subscriber</code>：</p>\n<ul>\n<li>当上游在一段时间发送的数据量过大的时候（这个量我们往往无法预计），此时就要使用Flowable以限制它所产生的量的元素10K +处理。</li>\n<li>当你从本地磁盘某个文件或者数据库读取数据时（这个数据量往往也很大），应当使用Flowable，这样下游可以根据需求自己控制一次读取多少数据；</li>\n<li>以读取数据为主且有阻塞线程的可能时用Flowable，下游可以根据某种条件自己主动读取数据。</li>\n</ul>\n<p>Flowable支持以下五种背压策略：</p>\n<ol>\n<li>missing, 缺省设置，不做任何操作</li>\n<li>error， 缓冲区大概在128</li>\n<li>buffer， 把上游发送的全部缓存下来，直到下游逐个消耗完。缓冲区在1000左右</li>\n<li>drop， 把存不下的事件丢弃</li>\n<li>latest， 只保留最新的</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">BackpressureStrategy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The &#123;<span class=\"doctag\">@code</span> onNext&#125; events are written without any buffering or dropping.</span></span><br><span class=\"line\"><span class=\"comment\">     * Downstream has to deal with any overflow.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;Useful when one applies one of the custom-parameter onBackpressureXXX operators.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    MISSING,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Signals a &#123;<span class=\"doctag\">@link</span> io.reactivex.rxjava3.exceptions.MissingBackpressureException MissingBackpressureException&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * in case the downstream can&#x27;t keep up.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ERROR,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Buffers &lt;em&gt;all&lt;/em&gt; &#123;<span class=\"doctag\">@code</span> onNext&#125; values until the downstream consumes it.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    BUFFER,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Drops the most recent &#123;<span class=\"doctag\">@code</span> onNext&#125; value if the downstream can&#x27;t keep up.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    DROP,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Keeps only the latest &#123;<span class=\"doctag\">@code</span> onNext&#125; value, overwriting any previous value if the</span></span><br><span class=\"line\"><span class=\"comment\">     * downstream can&#x27;t keep up.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    LATEST</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有些操作符内部包含背压策略入参</span></span><br><span class=\"line\">Flowable.create(<span class=\"keyword\">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> FlowableEmitter&lt;Integer&gt; emitter)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; ; i++) &#123;</span><br><span class=\"line\">            emitter.onNext(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, BackpressureStrategy.LATEST)</span><br><span class=\"line\">        .subscribeOn(Schedulers.io())</span><br><span class=\"line\">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">        .subscribe(<span class=\"keyword\">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                show(integer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有些操作符内部不包含背压策略入参，可在外部追加背压策略操作符</span></span><br><span class=\"line\">Flowable.interval(<span class=\"number\">1</span>, TimeUnit.MICROSECONDS)</span><br><span class=\"line\">        .onBackpressureDrop() <span class=\"comment\">// 加上背压策略</span></span><br><span class=\"line\">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">        .subscribe(<span class=\"keyword\">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Integer integer)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                show(integer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);        </span><br></pre></td></tr></table></figure>\n<h2 id=\"observables的&quot;热&quot;和&quot;冷&quot;\">Observables的&quot;热&quot;和&quot;冷&quot;<a title=\"#observables的&quot;热&quot;和&quot;冷&quot;\" href=\"#observables的&quot;热&quot;和&quot;冷&quot;\"></a></h2>\n<p>Observable什么时候开始发射数据序列？这取决于Observable的实现，一个&quot;热&quot;的Observable可能一创建完就开始发射数据，因此后续订阅它的观察者可能从序列中间的某个位置开始接受数据，可能会错过一些数据。一个&quot;冷&quot;的Observable会一直等待，直到有观察者订阅它才开始发射数据，因此这个观察者可以确保会收到整个数据序列。</p>\n<p>常见的工厂方法提供的都是Cold Observable（&quot;冷&quot;的Observable），例如just()、fromXX、create()、interval()、defer()，他们的共同点是当你有多个Subscriber的时候，他们的事件是独立的，互不干扰。</p>\n<p>不同于Cold Observable， Hot Observable（&quot;热&quot;的Observable）是共享数据的。对于Hot Observable的所有subscriber，他们会在同一时刻收到相同的数据。我们通常使用publish()操作符来将Cold Observable变为Hot。或者我们在RxBus中常常用到的Subject也是Hot Observable。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConnectableObservable interval = Observable.interval(<span class=\"number\">1</span>, TimeUnit.SECONDS).publish();</span><br><span class=\"line\"><span class=\"comment\">// 一旦进行connect，便开始了数据发送</span></span><br><span class=\"line\">interval.connect();</span><br></pre></td></tr></table></figure>\n<h2 id=\"subject\">Subject<a title=\"#subject\" href=\"#subject\"></a></h2>\n<p>这货就是特殊群体，既可以Observable（被观察者）又可以充当Observer（观察者），充当被观察者时还是Hot Observable。Subject是RxBus的核心。</p>\n<p>Subject是一个抽象类，不能采用new来实例一个对象。在RxJava2中Subject进行了更名，改成Processor，有以下形式，并且都支持背压策略：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">io.reactivex.processors.AsyncProcessor  </span><br><span class=\"line\">io.reactivex.processors.BehaviorProcessor</span><br><span class=\"line\">io.reactivex.processors.PublishProcessor</span><br><span class=\"line\">io.reactivex.processors.ReplayProcessor</span><br><span class=\"line\">io.reactivex.processors.UnicastProcessor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上游（被观察者）</span></span><br><span class=\"line\">FlowableProcessor&lt;Object&gt; bus = PublishProcessor.create().toSerialized();</span><br><span class=\"line\"><span class=\"comment\">// 下游订阅</span></span><br><span class=\"line\">bus.subscribe(<span class=\"keyword\">new</span> Consumer&lt;Object&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Object o)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">bus.onNext(<span class=\"string\">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"rxbus实现\">RxBus实现<a title=\"#rxbus实现\" href=\"#rxbus实现\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RxBus</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FlowableProcessor&lt;Object&gt; mBus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">RxBus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// toSerialized method made bus thread safe</span></span><br><span class=\"line\">        mBus = PublishProcessor.create().toSerialized();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RxBus <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Holder.BUS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">post</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        mBus.onNext(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Flowable&lt;T&gt; <span class=\"title\">toFlowable</span><span class=\"params\">(Class&lt;T&gt; tClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mBus.ofType(tClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Flowable&lt;Object&gt; <span class=\"title\">toFlowable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mBus;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasSubscribers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mBus.hasSubscribers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Holder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> RxBus BUS = <span class=\"keyword\">new</span> RxBus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一个页面订阅，准备接收来自其他页面的数据</span></span><br><span class=\"line\">RxBus.getInstance().toObservable()</span><br><span class=\"line\">        .subscribeOn(Schedulers.io())</span><br><span class=\"line\">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">        .subscribe(<span class=\"keyword\">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(String eventMsg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, eventMsg, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二个页面发送数据</span></span><br><span class=\"line\">RxBus.getInstance().post(<span class=\"string\">&quot;我是来自第二个页面的触发指令&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\">最后<a title=\"#最后\" href=\"#最后\"></a></h2>\n<p>有人说RxJava不建议使用，那是说给刚入行的小青草的，RxJava确实灵活，这也个最重要的优点，只要系统学习注意细节，开发过程中可以起到事半功倍的效果，加油！</p>\n","prev":{"title":"Lambda表达式你会吗","link":"posts/1613545058"},"next":{"title":"属于我们的0214","link":"posts/1613285792"},"plink":"https://blog.ixin.run/posts/1613529505/","toc":[{"id":"基本信息","title":"基本信息","index":"1","children":[{"id":"一些概念","title":"一些概念","index":"1.1"},{"id":"添加依赖","title":"添加依赖","index":"1.2"}]},{"id":"被观察者和观察者","title":"被观察者和观察者","index":"2","children":[{"id":"observable/observer","title":"Observable&#x2F;Observer","index":"2.1"},{"id":"flowable/subscriber","title":"Flowable&#x2F;Subscriber","index":"2.2"},{"id":"single/singleobserver","title":"Single&#x2F;SingleObserver","index":"2.3"},{"id":"completable/completableobserver","title":"Completable&#x2F;CompletableObserver","index":"2.4"},{"id":"maybe/maybeobserver","title":"Maybe&#x2F;MaybeObserver","index":"2.5"}]},{"id":"操作符","title":"操作符","index":"3","children":[{"id":"创建型操作符","title":"创建型操作符","index":"3.1"},{"id":"转换类操作符","title":"转换类操作符","index":"3.2"},{"id":"过滤类操作符","title":"过滤类操作符","index":"3.3"},{"id":"组合类操作符","title":"组合类操作符","index":"3.4"}]},{"id":"线程调度器","title":"线程调度器","index":"4"},{"id":"订阅管理","title":"订阅管理","index":"5"},{"id":"背压策略","title":"背压策略","index":"6"},{"id":"observables的&quot;热&quot;和&quot;冷&quot;","title":"Observables的&quot;热&quot;和&quot;冷&quot;","index":"7"},{"id":"subject","title":"Subject","index":"8","children":[{"id":"rxbus实现","title":"RxBus实现","index":"8.1"}]},{"id":"最后","title":"最后","index":"9"}],"reward":true,"copyright":{"author":"乂星人","link":"<a href=\"https://blog.ixin.run/posts/1613529505/\" title=\"玩转响应式编程RxJava\">https://blog.ixin.run/posts/1613529505/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}