{"title":"View的工作流程及自定义View","date":"2020-01-30T09:52:35.000Z","date_formatted":{"ll":"2020年1月30日","L":"2020/01/30","MM-DD":"01-30"},"link":"posts/1580377955","comments":true,"categories":["Android"],"updated":"2022-02-05T14:02:20.137Z","content":"<p>其实本篇我想总结一下自定义view的几种形式，但是自定义view的根本还是围绕着测量、布局和绘制这三大流程转，也正是View的工作流程，所以先把这个梳理一下，自定义View也就很轻松了。</p>\n<!--默认-->\n<h2 id=\"概述\">概述<a title=\"#概述\" href=\"#概述\"></a></h2>\n<p>View的绘制基本由measure()、layout()、draw()这个三个函数完成：</p>\n<ul>\n<li>measure：测量view的宽高</li>\n<li>layout：布局，计算当前view和子view的位置</li>\n<li>draw：绘制，视图的绘制工作</li>\n</ul>\n<h2 id=\"measurespec获取\">MeasureSpec获取<a title=\"#measurespec获取\" href=\"#measurespec获取\"></a></h2>\n<p>MeasureSpec字面意思是测量规格，是View的内部类，它封装了一个View的尺寸。测量过程中，系统会将View的LayoutParams根据父容器所施加的规则转换成对应的MeasureSpec，然后在onMeasure()当中根据这个measureSpec来测量出View的宽/高。</p>\n<p>MeasureSpec代表一个32位int值，高2位代表SpecMode，低30位代表SpecSize，这样做避免了过多的对象内存分配。<strong>SpecSize仅仅是作为View测量过程中的一个参考值，并不一定是最终值</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取测量模式（Mode）</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取测量大小（Size）</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过Mode 和 Size 生成新的SpecMode</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> measureSpec=MeasureSpec.makeMeasureSpec(size, mode);</span><br></pre></td></tr></table></figure>\n<p>MeasureSpec当中一共存在三种specMode：</p>\n<ul>\n<li>EXACTLY：精准模式，View可以拥有一个精确值；</li>\n<li>AT_MOST：最大模式，View的尺寸有一个最大值，View不可以超过MeasureSpec当中的Size值；</li>\n<li>UNSPECIFIED：尺寸无限制，要多大给多大，这种情况一般用于系统内部；</li>\n</ul>\n<p>LayoutParams也会有三种情况：</p>\n<ul>\n<li>精确值：大小确定</li>\n<li>wrap_content：大小不确定，需要进一步测量</li>\n<li>match_parent：大小不确定，但撑满“父view留的空间”</li>\n</ul>\n<p>View的MeasureSpec是由View的LayoutParams和父容器共同决定的：</p>\n<ul>\n<li>对于DecorView，其MeasureSpec由窗口的尺寸和其自身的LayoutParams来共同确定；</li>\n<li>对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定</li>\n</ul>\n<p>父View的measure的过程会先测量子View，等子View测量结果出来后，再来测量自己：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child, <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed, <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed)</span> </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 子View的LayoutParams，你在xml的layout_width和layout_height,</span></span><br><span class=\"line\">    <span class=\"comment\">// layout_xxx的值最后都会封装到这个个LayoutParams。</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据父View的测量规格和父View自己的Padding，</span></span><br><span class=\"line\">    <span class=\"comment\">//还有子View的Margin和已经用掉的空间大小（widthUsed），就能算出子View的MeasureSpec,具体计算过程看getChildMeasureSpec方法。</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,            </span><br><span class=\"line\">    mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed, lp.width);    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,           </span><br><span class=\"line\">    mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin  + heightUsed, lp.height);  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过父View的MeasureSpec和子View的自己LayoutParams的计算，算出子View的MeasureSpec，然后父容器传递给子容器的</span></span><br><span class=\"line\">    <span class=\"comment\">// 然后让子View用这个MeasureSpec（一个测量要求，比如不能超过多大）去测量自己，如果子View是ViewGroup 那还会递归往下测量。</span></span><br><span class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// spec参数   表示父View的MeasureSpec </span></span><br><span class=\"line\"><span class=\"comment\">// padding参数    父View的Padding+子View的Margin，父View的大小减去这些边距，才能精确算出</span></span><br><span class=\"line\"><span class=\"comment\">//                子View的MeasureSpec的size</span></span><br><span class=\"line\"><span class=\"comment\">// childDimension参数  表示该子View内部LayoutParams属性的值（lp.width或者lp.height）</span></span><br><span class=\"line\"><span class=\"comment\">//                     可以是wrap_content、match_parent、一个精确指(an exactly size),  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);  <span class=\"comment\">//获得父View的mode  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);  <span class=\"comment\">//获得父View的大小  </span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//父View的大小-自己的Padding+子View的Margin，得到值才是子View的大小。</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);   </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;    <span class=\"comment\">//初始化值，最后通过这个两个值生成子View的MeasureSpec</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;    <span class=\"comment\">//初始化值，最后通过这个两个值生成子View的MeasureSpec</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (specMode) &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// Parent has imposed an exact size on us  </span></span><br><span class=\"line\">    <span class=\"comment\">//1、父View是EXACTLY的 ！  </span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:   </span><br><span class=\"line\">        <span class=\"comment\">//1.1、子View的width或height是个精确值 (an exactly size)  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;            </span><br><span class=\"line\">            resultSize = childDimension;         <span class=\"comment\">//size为精确值  </span></span><br><span class=\"line\">            resultMode = MeasureSpec.EXACTLY;    <span class=\"comment\">//mode为 EXACTLY 。  </span></span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">        <span class=\"comment\">//1.2、子View的width或height为 MATCH_PARENT/FILL_PARENT   </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// Child wants to be our size. So be it.  </span></span><br><span class=\"line\">            resultSize = size;                   <span class=\"comment\">//size为父视图大小  </span></span><br><span class=\"line\">            resultMode = MeasureSpec.EXACTLY;    <span class=\"comment\">//mode为 EXACTLY 。  </span></span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">        <span class=\"comment\">//1.3、子View的width或height为 WRAP_CONTENT  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// Child wants to determine its own size. It can&#x27;t be  </span></span><br><span class=\"line\">            <span class=\"comment\">// bigger than us.  </span></span><br><span class=\"line\">            resultSize = size;                   <span class=\"comment\">//size为父视图大小  </span></span><br><span class=\"line\">            resultMode = MeasureSpec.AT_MOST;    <span class=\"comment\">//mode为AT_MOST 。  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// Parent has imposed a maximum size on us  </span></span><br><span class=\"line\">    <span class=\"comment\">//2、父View是AT_MOST的 ！      </span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:  </span><br><span class=\"line\">        <span class=\"comment\">//2.1、子View的width或height是个精确值 (an exactly size)  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// Child wants a specific size... so be it  </span></span><br><span class=\"line\">            resultSize = childDimension;        <span class=\"comment\">//size为精确值  </span></span><br><span class=\"line\">            resultMode = MeasureSpec.EXACTLY;   <span class=\"comment\">//mode为 EXACTLY 。  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"comment\">//2.2、子View的width或height为 MATCH_PARENT/FILL_PARENT  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// Child wants to be our size, but our size is not fixed.  </span></span><br><span class=\"line\">            <span class=\"comment\">// Constrain child to not be bigger than us.  </span></span><br><span class=\"line\">            resultSize = size;                  <span class=\"comment\">//size为父视图大小  </span></span><br><span class=\"line\">            resultMode = MeasureSpec.AT_MOST;   <span class=\"comment\">//mode为AT_MOST  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"comment\">//2.3、子View的width或height为 WRAP_CONTENT  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// Child wants to determine its own size. It can&#x27;t be  </span></span><br><span class=\"line\">            <span class=\"comment\">// bigger than us.  </span></span><br><span class=\"line\">            resultSize = size;                  <span class=\"comment\">//size为父视图大小  </span></span><br><span class=\"line\">            resultMode = MeasureSpec.AT_MOST;   <span class=\"comment\">//mode为AT_MOST  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// Parent asked to see how big we want to be  </span></span><br><span class=\"line\">    <span class=\"comment\">//3、父View是UNSPECIFIED的 ！  </span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:  </span><br><span class=\"line\">        <span class=\"comment\">//3.1、子View的width或height是个精确值 (an exactly size)  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// Child wants a specific size... let him have it  </span></span><br><span class=\"line\">            resultSize = childDimension;        <span class=\"comment\">//size为精确值  </span></span><br><span class=\"line\">            resultMode = MeasureSpec.EXACTLY;   <span class=\"comment\">//mode为 EXACTLY  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"comment\">//3.2、子View的width或height为 MATCH_PARENT/FILL_PARENT  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// Child wants to be our size... find out how big it should  </span></span><br><span class=\"line\">            <span class=\"comment\">// be  </span></span><br><span class=\"line\">            resultSize = <span class=\"number\">0</span>;                        <span class=\"comment\">//size为0！ ,其值未定  </span></span><br><span class=\"line\">            resultMode = MeasureSpec.UNSPECIFIED;  <span class=\"comment\">//mode为 UNSPECIFIED  </span></span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">        <span class=\"comment\">//3.3、子View的width或height为 WRAP_CONTENT  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// Child wants to determine its own size.... find out how  </span></span><br><span class=\"line\">            <span class=\"comment\">// big it should be  </span></span><br><span class=\"line\">            resultSize = <span class=\"number\">0</span>;                        <span class=\"comment\">//size为0! ，其值未定  </span></span><br><span class=\"line\">            resultMode = MeasureSpec.UNSPECIFIED;  <span class=\"comment\">//mode为 UNSPECIFIED  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//根据上面逻辑条件获取的mode和size构建MeasureSpec对象。  </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);  </span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n<p>上边获取孩子的MeasureSpec过程也不难理解，其中specSize取值来源：</p>\n<ul>\n<li><strong>自身确定取自身</strong></li>\n<li><strong>自身不定取父亲</strong></li>\n</ul>\n<p>而specMode取值则根据specSize取值来源而确定。</p>\n<p>MeasureSpec获取总共分为以下三种情况：</p>\n<ol>\n<li>父View的MeasureSpec是EXACTLY，说明父View尺寸是确定的，针对孩子的LayoutParamer：\n<ul>\n<li>精确值，则size为该精确值，mode为EXACTLY。</li>\n<li>MATCH_PARENT，则size取父size，因父size精确，所以mode为EXACTLY。</li>\n<li>WRAP_CONTENT，则size取父size，但是size是最大值，mode为AT_MOST。</li>\n</ul>\n</li>\n<li>父View的MeasureSpec是AT_MOST，说明父View尺寸是不确定，但是有一个最大值，针对孩子的LayoutParamer：\n<ul>\n<li>精确值，则size为该精确值，mode为EXACTLY。</li>\n<li>MATCH_PARENT，则size取父size，因父size为最大值，所以mode为AT_MOST。</li>\n<li>WRAP_CONTENT，则size取父size，因父size为最大值，所以mode为AT_MOST。</li>\n</ul>\n</li>\n<li>父View的MeasureSpec是UNSPECIFIED，说明父View尺寸没有限制，针对孩子的LayoutParamer：\n<ul>\n<li>精确值，则size为该精确值，mode为EXACTLY。</li>\n<li>MATCH_PARENT，因为父size无限制，所以子size无法评判，取值暂定为0，mode为UNSPECIFIED。</li>\n<li>WRAP_CONTENT，因为父size无限制，所以子size无法评判，取值暂定为0，mode为UNSPECIFIED。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"measure过程\">measure过程<a title=\"#measure过程\" href=\"#measure过程\"></a></h2>\n<p>MeasureSpec获得后便开始测量工作了，整个测量过程的入口位于View的measure方法当中，该方法做了一些参数的初始化之后调用了onMeasure方法，这里我们主要分析onMeasure：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">        getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>setMeasuredDimension就是用来确定view最终宽高的，还记得上边所说的，当MeasureSpec的mode是UNSPECIFIED时size暂定为0，这里的getDefaultSize的目的就是在specMode是UNSPECIFIED时确定一个默认值的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*   有两个参数size和measureSpec</span></span><br><span class=\"line\"><span class=\"comment\">*   1、size表示View的默认大小，它的值是通过`getSuggestedMinimumWidth()方法来获取的，之后我们再分析。</span></span><br><span class=\"line\"><span class=\"comment\">*   2、measureSpec则是我们之前分析的MeasureSpec，里面存储了View的测量值以及测量模式</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = size;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//从这里我们看出，对于AT_MOST和EXACTLY在View当中的处理是完全相同的。所以在我们自定义View时要对这两种模式做出处理。</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">            result = size;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">            result = specSize;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当View没有设置背景时，默认大小就是mMinWidth，这个值对应Android:minWidth属性，如果没有设置时默认为0.</span></span><br><span class=\"line\"><span class=\"comment\">//如果有设置背景，则默认大小为mMinWidth和mBackground.getMinimumWidth()当中的较大值。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不同的view，其onMeasure的实现方法也是不一样的，具体可参考LinearLayout以及FrameLayout等源码。</p>\n<p>在某些极端情况下，系统可能需要多次measure才能确定最终的测量宽/高，在这种情形下，在onMeasure方法中拿到的测量宽/高很可能是不准确的，<strong>一个比较好的习惯是在onLayout方法中去获取View的测量宽/高或者最终宽/高</strong>。</p>\n<p>另外Activity的生命周期在onCreate、onStart、onResume中均无法正确得到某个View的宽/高信息，这是因为View的measure过程和Activity的生命周期方法不是同步执行的。这里给出三种方法：</p>\n<ul>\n<li>Activity/View#onWindowFocusChanged，此种方法有可能多次调用。</li>\n<li>view.post(runnable)</li>\n<li>ViewTreeObserver</li>\n</ul>\n<h2 id=\"layout过程\">layout过程<a title=\"#layout过程\" href=\"#layout过程\"></a></h2>\n<p>Layout的作用是ViewGroup用来确定子元素的位置，当ViewGroup的位置被确定后，它在onLayout中会遍历所有的子元素并调用其layout方法。以下是view的layout实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*  这里的四个参数l、t、r、b分别代表View的左、上、右、下四个边界相对于其父View的距离。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</span><br><span class=\"line\">            mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldL = mLeft;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldT = mTop;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldB = mBottom;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldR = mRight;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这里通过setFrame或setOpticalFrame方法确定View在父容器当中的位置。</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</span><br><span class=\"line\">                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用onLayout方法。onLayout方法是一个空实现，不同的布局会有不同的实现。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</span><br><span class=\"line\">            onLayout(changed, l, t, r, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>和onMeasure方法类似，onLayout的具体实现同样和具体的布局有关，所以View和ViewGroup均没有真正实现onLayout方法。onLayout的实现可以参考LinearLayout以及FrameLayout等源码。</p>\n<h2 id=\"draw过程\">draw过程<a title=\"#draw过程\" href=\"#draw过程\"></a></h2>\n<p>Draw过程的作用是将View绘制到屏幕上面，整个流程的入口在View的draw()方法之中，View的绘制过程遵循如下几步：</p>\n<ul>\n<li>（1）绘制背景background.draw(canvas)。</li>\n<li>（2）绘制自己（onDraw）。</li>\n<li>（3）绘制children（dispatchDraw）。</li>\n<li>（4）绘制装饰（onDrawForeground）。</li>\n</ul>\n<p>View绘制过程的传递是通过dispatchDraw来实现的，dispatchDraw会遍历调用所有子元素的draw方法，如此draw事件就一层层地传递了下去。</p>\n<h2 id=\"自定义view的几种形式\">自定义View的几种形式<a title=\"#自定义view的几种形式\" href=\"#自定义view的几种形式\"></a></h2>\n<ol>\n<li>自定义组合控件</li>\n<li>继承系统控件</li>\n<li>继承View</li>\n<li>继承ViewGroup</li>\n</ol>\n<p>自定义View中的三个构造函数</p>\n<ul>\n<li>第一个构造函数，生成一个对象时候用。</li>\n<li>第二个构造函数，在XML中布局时自动调用。</li>\n<li>第三个构造函数，主要用于设定默认的Style。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TextView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(context, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TextView</span><span class=\"params\">(Context context, <span class=\"meta\">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(context, attrs, com.android.internal.R.attr.textViewStyle);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TextView</span><span class=\"params\">(Context context, <span class=\"meta\">@Nullable</span> AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(context, attrs, defStyleAttr, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义组合控件\">自定义组合控件<a title=\"#自定义组合控件\" href=\"#自定义组合控件\"></a></h3>\n<p>自定义组合控件就是将多个控件组合成为一个新的控件，主要解决多次重复使用同一类型的布局，例如CommonTitleBar。</p>\n<h3 id=\"继承系统控件\">继承系统控件<a title=\"#继承系统控件\" href=\"#继承系统控件\"></a></h3>\n<p>继承系统的控件可以分为继承View子类（如TextView等）和继承ViewGroup子类(如LinearLayout等)。这种实现方式会复用系统的逻辑，大多数情况下我们希望复用系统的onMeaseur和onLayout流程，所以我们只需要重写onDraw方法。</p>\n<p>举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineTextView</span> <span class=\"keyword\">extends</span> <span class=\"title\">TextView</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义画笔，用来绘制中心曲线</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建构造方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LineTextView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LineTextView</span><span class=\"params\">(Context context, <span class=\"meta\">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LineTextView</span><span class=\"params\">(Context context, <span class=\"meta\">@Nullable</span> AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mPaint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">        mPaint.setColor(Color.BLACK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重写draw方法，绘制我们需要的中间线以及背景</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = getWidth();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = getHeight();</span><br><span class=\"line\">        mPaint.setColor(Color.BLUE);</span><br><span class=\"line\">        <span class=\"comment\">//绘制方形背景</span></span><br><span class=\"line\">        RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">0</span>,<span class=\"number\">0</span>,width,height);</span><br><span class=\"line\">        canvas.drawRect(rectF,mPaint);</span><br><span class=\"line\">        mPaint.setColor(Color.BLACK);</span><br><span class=\"line\">        <span class=\"comment\">//绘制中心曲线，起点坐标（0,height/2），终点坐标（width,height/2）</span></span><br><span class=\"line\">        canvas.drawLine(<span class=\"number\">0</span>,height/<span class=\"number\">2</span>,width,height/<span class=\"number\">2</span>,mPaint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"继承view\">继承View<a title=\"#继承view\" href=\"#继承view\"></a></h3>\n<p>继承自View，除了要重写onDraw外还需要对onMeasure方法进行重写，上边获取MeasureSpec的时候我们分析过，在父View不确定的时候，子View的wrap_content和much_parent性质是一样的，因此需要重写。</p>\n<p>举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RectView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义画笔</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 实现构造方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RectView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RectView</span><span class=\"params\">(Context context, <span class=\"meta\">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RectView</span><span class=\"params\">(Context context, <span class=\"meta\">@Nullable</span> AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mPaint.setColor(Color.BLUE);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 重写onMeasure方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> widthMeasureSpec</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> heightMeasureSpec</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST &amp;&amp; heightMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">300</span>, heightSize);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(widthSize, <span class=\"number\">300</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 重写draw方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> canvas</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</span><br><span class=\"line\">        <span class=\"comment\">//获取各个编剧的padding值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> paddingLeft = getPaddingLeft();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> paddingRight = getPaddingRight();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> paddingTop = getPaddingTop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> paddingBottom = getPaddingBottom();</span><br><span class=\"line\">        <span class=\"comment\">//获取绘制的View的宽度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = getWidth() - paddingLeft - paddingRight;</span><br><span class=\"line\">        <span class=\"comment\">//获取绘制的View的高度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = getHeight() - paddingTop - paddingBottom;</span><br><span class=\"line\">        <span class=\"comment\">//绘制View，左上角坐标（0+paddingLeft,0+paddingTop），右下角坐标（width+paddingLeft,height+paddingTop）</span></span><br><span class=\"line\">        canvas.drawRect(<span class=\"number\">0</span> + paddingLeft, <span class=\"number\">0</span> + paddingTop, width + paddingLeft, height + paddingTop, mPaint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"继承viewgroup\">继承ViewGroup<a title=\"#继承viewgroup\" href=\"#继承viewgroup\"></a></h3>\n<p>自定义ViewGroup的过程相对复杂一些，因为除了要对自身的大小和位置进行测量之外，还需要对子View的测量参数负责。</p>\n<p>举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HorizontaiView</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> lastX;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> lastY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> currentIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> childWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Scroller scroller;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> VelocityTracker tracker;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.创建View类，实现构造函数</span></span><br><span class=\"line\"><span class=\"comment\">     * 实现构造方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontaiView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontaiView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        init(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontaiView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">        init(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        scroller = <span class=\"keyword\">new</span> Scroller(context);</span><br><span class=\"line\">        tracker = VelocityTracker.obtain();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 2、根据自定义View的绘制流程，重写`onMeasure`方法，注意对wrap_content的处理</span></span><br><span class=\"line\"><span class=\"comment\">     * 重写onMeasure方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> widthMeasureSpec</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> heightMeasureSpec</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"comment\">//获取宽高的测量模式以及测量值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"comment\">//测量所有子View</span></span><br><span class=\"line\">        measureChildren(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"comment\">//如果没有子View，则View大小为0，0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getChildCount() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST &amp;&amp; heightMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            View childOne = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> childWidth = childOne.getMeasuredWidth();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> childHeight = childOne.getMeasuredHeight();</span><br><span class=\"line\">            <span class=\"comment\">//View的宽度=单个子View宽度*子View个数，View的高度=子View高度</span></span><br><span class=\"line\">            setMeasuredDimension(getChildCount() * childWidth, childHeight);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            View childOne = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> childWidth = childOne.getMeasuredWidth();</span><br><span class=\"line\">            <span class=\"comment\">//View的宽度=单个子View宽度*子View个数，View的高度=xml当中设置的高度</span></span><br><span class=\"line\">            setMeasuredDimension(getChildCount() * childWidth, heightSize);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            View childOne = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> childHeight = childOne.getMeasuredHeight();</span><br><span class=\"line\">            <span class=\"comment\">//View的宽度=xml当中设置的宽度，View的高度=子View高度</span></span><br><span class=\"line\">            setMeasuredDimension(widthSize, childHeight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 3、接下来重写`onLayout`方法，对各个子View设置位置。</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置子View位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> changed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> l</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> r</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> childCount = getChildCount();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        View child;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childCount; i++) &#123;</span><br><span class=\"line\">            child = getChildAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (child.getVisibility() != View.GONE) &#123;</span><br><span class=\"line\">                childWidth = child.getMeasuredWidth();</span><br><span class=\"line\">                child.layout(left, <span class=\"number\">0</span>, left + childWidth, child.getMeasuredHeight());</span><br><span class=\"line\">                left += childWidth;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"paint和canvans\">Paint和Canvans<a title=\"#paint和canvans\" href=\"#paint和canvans\"></a></h2>\n<p>有时候在自定义View过程中我们还需要进行一些自定义绘制，所以在OnDraw方法中经常会用到Paint（画笔）和Canvans（画布）的知识。</p>\n<p>Paint主要用于定义画笔的颜色和样式，常用Api:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化画笔</span></span><br><span class=\"line\">paint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\"><span class=\"comment\">//设置抗锯齿</span></span><br><span class=\"line\">paint.setAntiAlias(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//设置画笔宽度</span></span><br><span class=\"line\">paint.setStrokeWidth(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//设置画笔颜色</span></span><br><span class=\"line\">paint.setColor(Color.RED);</span><br><span class=\"line\"><span class=\"comment\">//设置画笔透明度</span></span><br><span class=\"line\">paint.setAlpha(<span class=\"number\">128</span>);</span><br><span class=\"line\"><span class=\"comment\">//设置画笔样式</span></span><br><span class=\"line\">paint.setStyle(Paint.Style.STROKE);</span><br></pre></td></tr></table></figure>\n<p>Canvans主要确定画布的背景和样式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 画圆</span></span><br><span class=\"line\">canvas.drawCircle(getWidth()/<span class=\"number\">2</span>, getHeight()/<span class=\"number\">2</span>, <span class=\"number\">100</span>, paint);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 画矩形</span></span><br><span class=\"line\">canvas.drawRect(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">300</span>,<span class=\"number\">300</span>,paint);</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\">Rect rect = <span class=\"keyword\">new</span> Rect(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">300</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\">canvas.drawRect(rect,paint);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 画圆角矩形</span></span><br><span class=\"line\"><span class=\"comment\">// 中间两个参数是圆角中心距离边缘，x轴和y轴半径。</span></span><br><span class=\"line\">RectF rect = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">300</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\">canvas.drawRoundRect(rect,<span class=\"number\">10</span>,<span class=\"number\">10</span>,paint);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绘制椭圆</span></span><br><span class=\"line\">RectF rect = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">400</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\">canvas.drawOval(rect,paint);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绘制弧线</span></span><br><span class=\"line\"><span class=\"comment\">// public void drawArc(RectF oval, float startAngle, float sweepAngle, boolean useCenter,Paint paint) </span></span><br><span class=\"line\"><span class=\"comment\">// 参数：</span></span><br><span class=\"line\"><span class=\"comment\">// oval：矩形对象，弧线来自这个矩形的内切椭圆。</span></span><br><span class=\"line\"><span class=\"comment\">// float：起始角度。</span></span><br><span class=\"line\"><span class=\"comment\">// sweepAngle：弧线扫过的角度。注意不是结束角度，是弧线扫过的角度，方向是顺时针。</span></span><br><span class=\"line\"><span class=\"comment\">// useCenter：是否显示弧边。</span></span><br><span class=\"line\"><span class=\"comment\">// paint：画笔。</span></span><br><span class=\"line\"> RectF rect = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">400</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\"> canvas.drawArc(rect,<span class=\"number\">0</span>,<span class=\"number\">45</span>,<span class=\"keyword\">true</span>,paint);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绘制直线</span></span><br><span class=\"line\"><span class=\"comment\">// startX：起点的x坐标。</span></span><br><span class=\"line\"><span class=\"comment\">// startY：起点的y坐标。</span></span><br><span class=\"line\"><span class=\"comment\">// stopX：终点的x坐标。</span></span><br><span class=\"line\"><span class=\"comment\">// stopY：终点的y坐标</span></span><br><span class=\"line\"><span class=\"comment\">// paint：画笔。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(<span class=\"keyword\">float</span> startX, <span class=\"keyword\">float</span> startY, <span class=\"keyword\">float</span> stopX, <span class=\"keyword\">float</span> stopY, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 绘制多条直线</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// pts：float数组，所有直线点的集合。比如：&#123;100, 100, 200,200,300,300,500,500&#125;则表示两条直线，(100,100)是第一条直线的起点，(200,200)是第一条直线的终点。(300,300)是第二条直线的起点，(500,500)是第二条直线的终点，以此内推。。。</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span>[] pts </span>= &#123;<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>,<span class=\"number\">200</span>,<span class=\"number\">300</span>,<span class=\"number\">300</span>,<span class=\"number\">500</span>,<span class=\"number\">500</span>&#125;;</span><br><span class=\"line\">canvas.drawLines(pts,paint);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 填充背景颜色</span></span><br><span class=\"line\">canvas.drawARGB(<span class=\"number\">255</span>,<span class=\"number\">189</span>,<span class=\"number\">60</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\">canvas.drawColor(Color.parseColor(<span class=\"string\">&quot;#FFBD3C64&quot;</span>));</span><br></pre></td></tr></table></figure>\n<p>Canvas在自定义View的OnDraw方法中会给到，当然我们也可以自己生成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);</span><br><span class=\"line\">Canvas canvas = <span class=\"keyword\">new</span> Canvas(bitmap);</span><br></pre></td></tr></table></figure>","prev":{"title":"Edittext的自动填充引起的Bug","link":"posts/1583593890"},"next":{"title":"EventBus实现原理及使用","link":"posts/1578479538"},"plink":"https://blog.ixin.run/posts/1580377955/","toc":[{"id":"概述","title":"概述","index":"1"},{"id":"measurespec获取","title":"MeasureSpec获取","index":"2"},{"id":"measure过程","title":"measure过程","index":"3"},{"id":"layout过程","title":"layout过程","index":"4"},{"id":"draw过程","title":"draw过程","index":"5"},{"id":"自定义view的几种形式","title":"自定义View的几种形式","index":"6","children":[{"id":"自定义组合控件","title":"自定义组合控件","index":"6.1"},{"id":"继承系统控件","title":"继承系统控件","index":"6.2"},{"id":"继承view","title":"继承View","index":"6.3"},{"id":"继承viewgroup","title":"继承ViewGroup","index":"6.4"}]},{"id":"paint和canvans","title":"Paint和Canvans","index":"7"}],"reward":true,"copyright":{"author":"乂星人","link":"<a href=\"https://blog.ixin.run/posts/1580377955/\" title=\"View的工作流程及自定义View\">https://blog.ixin.run/posts/1580377955/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}