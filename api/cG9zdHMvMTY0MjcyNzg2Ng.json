{"title":"Flutter状态管理器","date":"2022-01-21T01:17:46.000Z","date_formatted":{"ll":"2022年1月21日","L":"2022/01/21","MM-DD":"01-21"},"thumbnail":"https://note.youdao.com/yws/api/personal/file/5EBBDFA25D9E4369ABE378F57C04CCBD?method=download&shareKey=29ed5dd55acdd67717a075723eba7a2e","link":"posts/1642727866","comments":true,"categories":["Flutter"],"updated":"2022-02-05T09:14:01.711Z","content":"<p>Flutter是声明式编程模式，开发者就像堆积木一样来堆模型，只用关心每块积木展示的条件，不需要关心积木内部的功能实现细节。因此每一块积木都是一种状态，慢慢随着积木越来越多开发者必须要把这些状态（形态、关系）管理好，否则就会是一团麻了。</p>\n<a id=\"more\"></a>\n<p><strong>编程语言主要有三种类型</strong>：</p>\n<ul>\n<li>声明式编程：专注于”做什么”而不是”如何去做”。在更高层面写代码，更关心的是目标，而不是底层算法实现的过程。<br>\n如：css, 正则表达式，sql 语句，html, xml…</li>\n<li>命令式编程(过程式编程) : 专注于”如何去做”，这样不管”做什么”，都会按照你的命令去做。解决某一问题的具体算法实现。</li>\n<li>函数式编程：把运算过程尽量写成一系列嵌套的函数调用。</li>\n</ul>\n<p>iOS 和 Android 的原生开发模式是命令式编程模式。命令式编程要求开发者一步步描述整个构建过程，从而引导程序去构建用户界面。</p>\n<h2 id=\"常见状态管理器对比\">常见状态管理器对比<a title=\"#常见状态管理器对比\" href=\"#常见状态管理器对比\"></a></h2>\n<p>状态管理器一般会关注两点：</p>\n<ul>\n<li>状态的更新</li>\n<li>状态的共享</li>\n</ul>\n<p>以下是一些常见的状态管理对比</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>状态管理框架</th>\n<th>状态更新</th>\n<th>状态共享</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setState</td>\n<td>yes</td>\n<td>no</td>\n<td>自带的状态管理器，适用于较小规模 widget 的暂时性状态的基础管理方法</td>\n</tr>\n<tr>\n<td>StreamController</td>\n<td>yes</td>\n<td>no</td>\n<td>基于流/观察者模式的基础管理方法</td>\n</tr>\n<tr>\n<td>RxDart</td>\n<td>yes</td>\n<td>no</td>\n<td>基于流/观察者模式的框架，对StreamController进行了高级封装</td>\n</tr>\n<tr>\n<td>flutter_bloc</td>\n<td>yes</td>\n<td>yes</td>\n<td>底层基于 InheritedWidget，核心思想也是基于流来管理数据</td>\n</tr>\n<tr>\n<td>Provider</td>\n<td>yes</td>\n<td>yes</td>\n<td>基于 InheritedWidget 和 ChangeNotifier 进行了封装，使用缓存提升性能，避免不必要的重绘</td>\n</tr>\n<tr>\n<td>Fish-Redux</td>\n<td>yes</td>\n<td>yes</td>\n<td>闲鱼出品，基于前端Redux思想，似乎不再维护</td>\n</tr>\n<tr>\n<td>GetX</td>\n<td>yes</td>\n<td>yes</td>\n<td>轻量级响应式状态管理解决方案，目前很受欢迎</td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"inheritedwidget\">InheritedWidget<a title=\"#inheritedwidget\" href=\"#inheritedwidget\"></a></h2>\n<p>系统自带的数据共享组件，例如我们在应用根 widget 中通过InheritedWidget共享了一个数据，那么我们便可以在任意子 widget 中来获取该共享的数据。</p>\n<p>创建方式：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInheritedWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">InheritedWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> data;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/// <span class=\"markdown\">在构造方法中，我们需要传入两个参数:</span></span></span><br><span class=\"line\">  <span class=\"comment\">/// <span class=\"markdown\">一个是我们希望共享的数据（在本例中数据是int型，实际业务中共享的通常是一个相对复杂的数据），</span></span></span><br><span class=\"line\">  <span class=\"comment\">/// <span class=\"markdown\">另一个就是我们带界面的Widget。</span></span></span><br><span class=\"line\">  MyInheritedWidget(<span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.data, Widget child) : <span class=\"keyword\">super</span>(child: child);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/// <span class=\"markdown\">获取数据方法</span></span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> MyInheritedWidget getData(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> context.inheritFromWidgetOfExactType(MyInheritedWidget);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/// <span class=\"markdown\">决定通知子节点中StatefulWidget的didChangeDependencies方法是否调用。</span></span></span><br><span class=\"line\">  <span class=\"comment\">/// <span class=\"markdown\">StatefulWidget的didChangeDependencies方法就是与InheritedWidget配合使用的。只有当InheritedWidget发生更新并且决定通知时，didChangeDependencies才会调用。</span></span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> updateShouldNotify(MyInheritedWidget oldWidget) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldWidget.data != data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用场景：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\">Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Text(</span><br><span class=\"line\">        <span class=\"string\">&#x27;count : <span class=\"subst\">$&#123;MyInheritedWidget.getData(context).data&#125;</span>&#x27;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"streamcontroller\">StreamController<a title=\"#streamcontroller\" href=\"#streamcontroller\"></a></h2>\n<p>RxDart、BloC、flutter_bloc 都是基于 Stream 开发，Stream 的思想是基于管道（pipe）和 生产者消费者模式。</p>\n<p>Stream并是不Flutter的产物，而是由Dart提供的，Stream是一个抽象的接口，Dart提供了StreamController接口类可以让我们方便的使用Stream。步骤大致如下：</p>\n<ul>\n<li>创建StreamController</li>\n<li>获取StreamSink，用作发射事件</li>\n<li>获取Stream流，可用作事件的监听</li>\n<li>获取StreamSubscription，用作管理监听、关闭、暂停等</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建StreamController</span></span><br><span class=\"line\">StreamController&lt;<span class=\"built_in\">String</span>&gt; streamController = StreamController&lt;<span class=\"built_in\">String</span>&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 获取StreamSink用于发射事件</span></span><br><span class=\"line\">StreamSink&lt;<span class=\"built_in\">String</span>&gt; <span class=\"keyword\">get</span> streamSink  =&gt; streamController.sink;</span><br><span class=\"line\"><span class=\"comment\">// 获取Stream用于监听</span></span><br><span class=\"line\">Stream&lt;<span class=\"built_in\">String</span>&gt; <span class=\"keyword\">get</span> streamData =&gt; streamController.stream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发射一个事件.</span></span><br><span class=\"line\">streamSink.add(index.toString());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//监听事件,返回StreamSubscription，可用于监听的取消</span></span><br><span class=\"line\">StreamSubscription&lt;<span class=\"built_in\">String</span>&gt; subscription = streamData.listen((value) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"streambuilder\">StreamBuilder<a title=\"#streambuilder\" href=\"#streambuilder\"></a></h3>\n<p>StreamBuilder对Stream相关逻辑的包装组件（Widget），StreamBuilder 内部已经帮我们完成了stream的订阅与取消订阅，因此在Widget中监听数据变化及时刷新界面更方便。</p>\n<p>构造方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StreamBuilder(&#123;Key key, T initialData, Stream&lt;T&gt; stream, <span class=\"meta\">@required</span> AsyncWidgetBuilder&lt;T&gt; builder &#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>initialData : 默认初始化数据</li>\n<li>stream : stream事件流对象</li>\n<li>builder : 接收两个参数 <code>BuildContext context</code> 和 <code>AsyncSnapshot&lt;T&gt; snapshot</code> , 返回值是 Widget 组件 ; <code>AsyncSnapshot&lt;T&gt; snapshot</code> 参数中包含有异步计算的信息;</li>\n</ul>\n<p>其他方法：</p>\n<ul>\n<li>afterConnected:返回一个AsyncSnapshot，当订阅了stream时会回调此AsyncSnapshot</li>\n<li>afterData:返回一个AsyncSnapshot，当stream有事件触发时会回调此AsyncSnapshot</li>\n<li>afterDisconnected:返回一个AsyncSnapshot，当取消订阅stream时会回调此AsyncSnapshot</li>\n<li>afterDone:返回一个AsyncSnapshot，当stream被关闭时会回调此AsyncSnapshot</li>\n<li>afterError:返回一个AsyncSnapshot，stream发生错误时会回调此AsyncSnapshot</li>\n</ul>\n<p>接收数据：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">        appBar: AppBar(title: Text(<span class=\"string\">&#x27;streamBuilder&#x27;</span>)),</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            StreamBuilder&lt;<span class=\"built_in\">String</span>&gt;(</span><br><span class=\"line\">              stream: streamData,</span><br><span class=\"line\">              builder: (BuildContext context, AsyncSnapshot&lt;<span class=\"built_in\">String</span>&gt; snapshot) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Text(<span class=\"string\">&#x27;Result: <span class=\"subst\">$&#123;snapshot.data&#125;</span>&#x27;</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        )</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"provider\">Provider<a title=\"#provider\" href=\"#provider\"></a></h2>\n<p>8种内容提供者，常用的有：</p>\n<ol>\n<li>MultiProvider，多种复合嵌套，不建议入口处同时初始化多个provider，容易引起内存瞬间加大，除了一些特殊场景，例如日夜间切换，和语言切换。</li>\n<li>ChangeNotifyProvider, 使用时继承 ChangeNotifier即可。</li>\n</ol>\n<p>provider 实例化及取值也有三种：</p>\n<ol>\n<li>XXXProvider provider = Provider.of<XXXProvider>(context);</li>\n<li>采用Consume</li>\n<li>调用Provider的方法：context.read<XXXProvider>().xxx();<br>\n观察Provider的数据,用于展示：context.watch<XXXProvider>().xxx;</li>\n</ol>\n<p>实例：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"markdown\">1 创建ChangeNotifier,实际上就是我们的状态，它不仅存储了我们的数据模型，还包含了更改数据的方法，并暴露出它想要暴露出的数据</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"title\">with</span> <span class=\"title\">ChangeNotifier</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> _count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> <span class=\"keyword\">get</span> count =&gt; _count;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> increment() &#123;</span><br><span class=\"line\">    _count++;</span><br><span class=\"line\">    notifyListeners();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// <span class=\"markdown\">2 ChangeNotifierProvider. 在Widget Tree中插入ChangeNotifierProvider，以便Consumer可以获取到数据</span></span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// <span class=\"markdown\">创建顶层共享数据。这里使用MultiProvider可以创建多个共享数据，因为实际的应用不可能只有一个数据模型</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> MultiProvider(</span><br><span class=\"line\">      providers: [</span><br><span class=\"line\">        ChangeNotifierProvider(create: (_) =&gt; Counter()),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      child: MaterialApp(</span><br><span class=\"line\">        title: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">        home: FirstPage(),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstPage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(title: Text(<span class=\"string\">&quot;Provider练习&quot;</span>)),</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        <span class=\"comment\">/// <span class=\"markdown\">3 获取Provider实例</span></span></span><br><span class=\"line\">        <span class=\"comment\">/// <span class=\"markdown\">ctx: context,上下文,目的是知道当前树的对象</span></span></span><br><span class=\"line\">        <span class=\"comment\">/// <span class=\"markdown\">counterPro: ChangeNotifier对应的实例，也是我们在builder函数中主要使用的对象</span></span></span><br><span class=\"line\">        <span class=\"comment\">/// <span class=\"markdown\">child: 目的是进行优化，如果builder下面有一颗庞大的子树，当模型发生改变的时候，我们并不希望重新build这颗子树，那么就可以将这颗子树放到Consumer的child中，在这里直接引入即可.</span></span></span><br><span class=\"line\">        child: Consumer&lt;Counter&gt;(builder: (ctx, counterPro, child) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> Text(</span><br><span class=\"line\">            <span class=\"string\">&quot;当前计数:<span class=\"subst\">$&#123;counterPro.count&#125;</span>&quot;</span>,</span><br><span class=\"line\">            style: TextStyle(fontSize: <span class=\"number\">20</span>, color: Colors.red),</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      ),</span><br><span class=\"line\"></span><br><span class=\"line\">      floatingActionButton: Consumer&lt;Counter&gt;(</span><br><span class=\"line\">        builder: (ctx, counterPro, child) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> FloatingActionButton(</span><br><span class=\"line\">            child: child,</span><br><span class=\"line\">            onPressed: () &#123;</span><br><span class=\"line\">              counterPro.increment();</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        child: Icon(Icons.add), <span class=\"comment\">//! Icon放在builder外面,防止每次跟着一起刷新</span></span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"getx\">GetX<a title=\"#getx\" href=\"#getx\"></a></h2>\n<p>GetX相比Provider更灵活，轻量，简单，api也更丰富，除了包含状态管理，还包含路由配置，另外不在依赖Context，全局随便调用。</p>\n<h3 id=\"快速上手\">快速上手<a title=\"#快速上手\" href=\"#快速上手\"></a></h3>\n<ol>\n<li>入口，将MaterialApp改成GetMaterialApp</li>\n</ol>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// <span class=\"markdown\">GetMaterialApp重写了MaterialApp，可以配置很多，如，主题、国际化、静态路由等</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> GetMaterialApp(</span><br><span class=\"line\">      home: SimplePage(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>创建GetxController，用于管理数据和刷新操作</li>\n</ol>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleController</span> <span class=\"keyword\">extends</span> <span class=\"title\">GetxController</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> _counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> <span class=\"keyword\">get</span> counter =&gt; _counter;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> increment() &#123;</span><br><span class=\"line\">    _counter++;</span><br><span class=\"line\">    <span class=\"comment\">// 刷新（GetxController通过update()更新GetBuilder）</span></span><br><span class=\"line\">    update();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>采用GetBuild构建视图，监听数据变化</li>\n</ol>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimplePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;SimplePage--build&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> GetBuilder&lt;SimpleController&gt;(</span><br><span class=\"line\">        init: SimpleController(),</span><br><span class=\"line\">        builder: (controller) &#123;</span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">            appBar: AppBar(title: Text(<span class=\"string\">&#x27;Simple&#x27;</span>)),</span><br><span class=\"line\">            body: Center(</span><br><span class=\"line\">              child: Text(controller.counter.toString()),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            floatingActionButton: FloatingActionButton(</span><br><span class=\"line\">              onPressed: () &#123;</span><br><span class=\"line\">                controller.increment();</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              child: Icon(Icons.add),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimplePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(title: Text(<span class=\"string\">&#x27;Simple&#x27;</span>)),</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: GetBuilder&lt;SimpleController&gt;(</span><br><span class=\"line\">            init: SimpleController(),</span><br><span class=\"line\">            <span class=\"comment\">// 每次执行update，builder内部都会重新构建</span></span><br><span class=\"line\">            builder: (controller) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> Text(controller.counter.toString());</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      floatingActionButton: FloatingActionButton(</span><br><span class=\"line\">        onPressed: () &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 找到Controller执行操作</span></span><br><span class=\"line\">          Get.find&lt;SimpleController&gt;().increment();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        child: Icon(Icons.add),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注：GetBuilder用于小部件的刷新，不建议放到根节点上全局刷。</p>\n<h3 id=\"局部刷新\">局部刷新<a title=\"#局部刷新\" href=\"#局部刷新\"></a></h3>\n<p><code>update()</code>使所有绑定了该Controller的GetBuilder都执行了刷新，可通过追加id，进行局部刷新：</p>\n<p>Controller:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> _counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span> <span class=\"keyword\">get</span> counter =&gt; _counter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span> _name = <span class=\"string\">&quot;Lili&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">String</span> <span class=\"keyword\">get</span> firstName =&gt; _name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> increment() &#123;</span><br><span class=\"line\">  _counter++;</span><br><span class=\"line\">  _name = WordPair.random().asPascalCase;</span><br><span class=\"line\">  update([<span class=\"string\">&#x27;counter&#x27;</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> changeName() &#123;</span><br><span class=\"line\">  _counter++;</span><br><span class=\"line\">  _name = WordPair.random().asPascalCase;</span><br><span class=\"line\">  update([<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>GetBuilder:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GetBuilder&lt;SimpleAdvancedController&gt;(</span><br><span class=\"line\">            id: <span class=\"string\">&#x27;counter&#x27;</span>,</span><br><span class=\"line\">            builder: (ctl) =&gt; Text(ctl.counter.toString()),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          SizedBox(</span><br><span class=\"line\">            height: <span class=\"number\">50</span>,</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          GetBuilder&lt;SimpleAdvancedController&gt;(</span><br><span class=\"line\">            id: <span class=\"string\">&#x27;name&#x27;</span>,</span><br><span class=\"line\">            builder: (ctl) =&gt; Text(ctl.firstName),</span><br><span class=\"line\">          ),</span><br></pre></td></tr></table></figure>\n<h3 id=\"getxcontroller生命周期\">GetxController生命周期<a title=\"#getxcontroller生命周期\" href=\"#getxcontroller生命周期\"></a></h3>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleController</span> <span class=\"keyword\">extends</span> <span class=\"title\">GetxController</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> _counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> <span class=\"keyword\">get</span> counter =&gt; _counter;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> increment() &#123;</span><br><span class=\"line\">    _counter++;</span><br><span class=\"line\">    update();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> onInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onInit();</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;SimpleController--onInit&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> onReady() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onReady();</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;SimpleController--onReady&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> onClose() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onClose();</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;SimpleController--onClose&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"响应式刷新\">响应式刷新<a title=\"#响应式刷新\" href=\"#响应式刷新\"></a></h3>\n<p>在Controller的变量后追加<code>.obs</code>创建响应式数据，使得该变量变成了可观察者：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;新垣结衣&#x27;</span>.obs;</span><br></pre></td></tr></table></figure>\n<p>观察变量的改变，不在需要update，不在是GetBuilder了：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obx (() =&gt; Text (controller.name));</span><br></pre></td></tr></table></figure>\n<p>因为是响应式，只要数据改变，界面布局自动刷新。</p>\n<p>细心的同学会发现<code>.obs</code>的底层是Rx包装，所以也可以用Rx来定义响应式变量，这里不在说了。</p>\n<h3 id=\"跨路由使用\">跨路由使用<a title=\"#跨路由使用\" href=\"#跨路由使用\"></a></h3>\n<p>不同页面跨路由使用，只需要把controller存储起来即可：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrossOnePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// <span class=\"markdown\">Get.put存储controller</span></span></span><br><span class=\"line\">    CrossOneController controller = Get.put(CrossOneController());</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>另外一个页面使用时，获取controller：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CheetahButton(<span class=\"string\">&#x27;打印CrossOneController的age&#x27;</span>, () &#123;</span><br><span class=\"line\">  <span class=\"comment\">/// <span class=\"markdown\">Get.find获取controller</span></span></span><br><span class=\"line\">          <span class=\"built_in\">print</span>(Get.find&lt;CrossOneController&gt;().age);</span><br><span class=\"line\">        &#125;),</span><br></pre></td></tr></table></figure>\n<p>此时需要注意一个问题：</p>\n<ul>\n<li>当<code>Get.put</code>在build里put时，controller的生命周期和该widget保持一致的，widget销毁了这个controller也自动销毁了</li>\n<li>等<code>Get.put</code>作为成员变量在build外部执行时，controller的生命周期是和所属widget的<strong>引用</strong>保持一致的。</li>\n</ul>\n<p>我们开发过程中总喜欢一个页面对应一个controller，如果作为成员变量存放，这样的话需要额外注意内存的回收问题，可以建一个Widget，来管理controller的回收。</p>\n<h3 id=\"其他\">其他<a title=\"#其他\" href=\"#其他\"></a></h3>\n<p>路由、弹框需自行进一步挖掘。</p>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/eebb15f2c0d5\">https://www.jianshu.com/p/eebb15f2c0d5</a></li>\n<li><a href=\"https://www.jianshu.com/p/41ac6dd57f5e\">https://www.jianshu.com/p/41ac6dd57f5e</a></li>\n<li><a href=\"https://juejin.cn/post/6844904181917040648#heading-11\">https://juejin.cn/post/6844904181917040648#heading-11</a></li>\n<li><a href=\"https://www.jianshu.com/p/bcefa3d2292c\">https://www.jianshu.com/p/bcefa3d2292c</a></li>\n<li><a href=\"https://juejin.cn/post/7012044249386450981\">https://juejin.cn/post/7012044249386450981</a></li>\n</ul>\n","prev":{"title":"Flutter渲染机制","link":"posts/1643029348"},"next":{"title":"Flutter开发语言Dart学习","link":"posts/1642687720"},"plink":"https://blog.ixin.run/posts/1642727866/","toc":[{"id":"常见状态管理器对比","title":"常见状态管理器对比","index":"1"},{"id":"inheritedwidget","title":"InheritedWidget","index":"2"},{"id":"streamcontroller","title":"StreamController","index":"3","children":[{"id":"streambuilder","title":"StreamBuilder","index":"3.1"}]},{"id":"provider","title":"Provider","index":"4"},{"id":"getx","title":"GetX","index":"5","children":[{"id":"快速上手","title":"快速上手","index":"5.1"},{"id":"局部刷新","title":"局部刷新","index":"5.2"},{"id":"getxcontroller生命周期","title":"GetxController生命周期","index":"5.3"},{"id":"响应式刷新","title":"响应式刷新","index":"5.4"},{"id":"跨路由使用","title":"跨路由使用","index":"5.5"},{"id":"其他","title":"其他","index":"5.6"}]},{"id":"参考","title":"参考","index":"6"}],"reward":true,"copyright":{"author":"乂星人","link":"<a href=\"https://blog.ixin.run/posts/1642727866/\" title=\"Flutter状态管理器\">https://blog.ixin.run/posts/1642727866/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}